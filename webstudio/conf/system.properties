# System properties

custom.spreadsheet.type = true
dispatching.mode = java
dispatching.validation=true

user.mode = single

test.run.parallel = true
test.run.thread.count = 4

compile.auto = true

# Encoding that can be used to uncompress zip file if UTF-8 isn't applicable.
# Note: often in Windows zips are compressed using DOS charset depending on system locale, not Windows ANSI charset.
zip.charsets.support = IBM866, IBM437, IBM850, windows-1252, windows-1251, windows-1250, ISO-8859-1

# Common properties

user.workspace.home = ${webstudio.home}/user-workspace
user.settings.home = ${webstudio.home}/user-settings

project.history.home = ${webstudio.home}/project-history
project.history.count = 0
project.history.unlimited = true

update.system.properties = false
data.format.date = MM/dd/yyyy

# Compatibility properties
default.openl.compatibility.version =

### Design Repository properties

design-repository.name = Design

# Which class should we instantiate in RepositoryFactory?
design-repository.factory = org.openl.rules.repository.factories.LocalJackrabbitRepositoryFactory
# Where JCR keeps its files (Local mode)
design-repository.uri = ${webstudio.home}/design-repository

design-repository.login =
design-repository.password =

# The path in repository where Projects are stored. Must end with "/".
design-repository.base.path = DESIGN/rules/

# Regexp to validate comments. Can be empty. In this case comment will not be validated.
design-repository.comment-validation-pattern =
# Message shown when comment isn't valid.
design-repository.invalid-comment-message =


# If true, all projects will be stored in the folder configured in "design-repository.base.path" property.
# If false, projects can be stored in any folder.
design-repository.folder-structure.flat = true

# The file in repository containing info related to project names and paths.
# Used if design-repository.folder-structure.flat == false.
# The file should have such structure:
#   project.1.name = MyProject
#   project.1.path = mysubmodule1/myproject/src/main/openl
#   project.2.name = Other Project
#   project.2.path = mysubmodule2/other-project/src/main/openl
design-repository.folder-structure.configuration = openl-projects.properties

### AWS S3 Specific
# A logical unit of storage in AWS object storage service. Globally unique.
design-repository.bucket-name =
# AWS Region that is geographically close to you to optimize latency, minimize costs etc.
design-repository.region-name =
# Alphanumeric text string that is used to identify the user who owns the account.
design-repository.access-key =
# Plays the role of a password for a given access-key.
design-repository.secret-key =
###

### Git Specific
# Local path for Git repository.
design-repository.local-repository-path = ${webstudio.home}/design-repository
# The branch where the changes will be comitted.
design-repository.branch = master
# Prefix for automatically generated tag which will be added to every commit.
design-repository.tag-prefix =
# Comment template for commits. Use {username} for predefined OpenL-specific Commit Type used by OpenL,
# {user-message} for meaningful message describing commit, {username} for commit author.
design-repository.comment-template = {user-message} Author: {username}. Commit type: {commit-type}.

# New branch pattern. Use {0} for project name, {1} for username, {2} for current date.
# Only latin letters, numbers, '_', '-' and '/' are allowed.
design-repository.new-branch-pattern = WebStudio/{0}/{1}/{2}
# Folder where git-specific internal files will be stored
design-repository.git-settings-path = ${webstudio.home}/git-settings/
# Committer's display name. If null, user name will be WebStudio user name.
design-repository.user-display-name =
# Committer's email. If null, email will be empty.
design-repository.user-email =
###

### AWS S3 and Git Specific
# Repository changes check interval in seconds. Must be greater than 0.
design-repository.listener-timer-period = 10
###

### User message defaults
design-repository.comment-template.user-message.default.save =
design-repository.comment-template.user-message.default.create = Create project {project-name}
design-repository.comment-template.user-message.default.archive = Archive project {project-name}
design-repository.comment-template.user-message.default.restore = Restore project {project-name}
design-repository.comment-template.user-message.default.erase = Erase project {project-name}
design-repository.comment-template.user-message.default.copied-from = Copied from: {project-name}
design-repository.comment-template.user-message.default.restored-from = Restored from revision #{revision}
###

### Deploy Configuration Repository properties
# If true, Deploy Config Repository use own settings. If false, Design Repository is used to store Deploy Configurations.
deploy-config-repository.separate-repository = false

deploy-config-repository.name = Deploy Configuration

# Which class should we instantiate in RepositoryFactory?
deploy-config-repository.factory = org.openl.rules.repository.factories.LocalJackrabbitRepositoryFactory

# Where JCR keeps its files (Local mode)
deploy-config-repository.uri = ${webstudio.home}/deploy-config-repository

deploy-config-repository.login =
deploy-config-repository.password =

# The path in repository where Deploy Configurations are stored. Must end with "/".
deploy-config-repository.base.path = DESIGN/deployments/

# Regexp to validate comments. Can be empty. In this case comment will not be validated.
deploy-config-repository.comment-validation-pattern =
# Message shown when comment isn't valid.
deploy-config-repository.invalid-comment-message =

# If true, all projects will be stored in the folder configured in "deploy-config-repository.base.path" property.
# If false, projects can be stored in any folder.
deploy-config-repository.folder-structure.flat = true

# The file in repository containing info related to project names and paths.
# Used if deploy-config-repository.folder-structure.flat == false.
# The file should have such structure:
#   project.1.name = MyProject
#   project.1.path = mysubmodule1/myproject/src/main/openl
#   project.2.name = Other Project
#   project.2.path = mysubmodule2/other-project/src/main/openl

deploy-config-repository.folder-structure.configuration = openl-deploy-configs.properties

### AWS S3 Specific
# A logical unit of storage in AWS object storage service. Globally unique.
deploy-config-repository.bucket-name =
# AWS Region that is geographically close to you to optimize latency, minimize costs etc.
deploy-config-repository.region-name =
# Alphanumeric text string that is used to identify the user who owns the account.
deploy-config-repository.access-key =
# Plays the role of a password for a given access-key.
deploy-config-repository.secret-key =
###

### Git Specific
# Local path for Git repository.
deploy-config-repository.local-repository-path = ${webstudio.home}/deploy-config-repository
# The branch where the changes will be comitted.
deploy-config-repository.branch = master
# Prefix for automatically generated tag which will be added to every commit.
deploy-config-repository.tag-prefix =
# Comment template for commits. Use {username} for predefined OpenL-specific Commit Type used by OpenL,
# {user-message} for meaningful message describing commit, {username} for commit author.
deploy-config-repository.comment-template = {user-message} Author: {username}. Commit type: {commit-type}.
# Committer's display name. If null, user name will be WebStudio user name.
deploy-config-repository.user-display-name =
# Committer's email. If null, email will be empty.
deploy-config-repository.user-email =
###

### AWS S3 and Git Specific
# Repository changes check interval in seconds. Must be greater than 0.
deploy-config-repository.listener-timer-period = 10
###

### User message defaults
deploy-config-repository.comment-template.user-message.default.save =
deploy-config-repository.comment-template.user-message.default.create = Create deploy configuration {project-name}
deploy-config-repository.comment-template.user-message.default.archive = Archive deploy configuration {project-name}
deploy-config-repository.comment-template.user-message.default.restore = Restore deploy configuration {project-name}
deploy-config-repository.comment-template.user-message.default.erase = Erase deploy configuration {project-name}
deploy-config-repository.comment-template.user-message.default.copied-from = Copied from: {project-name}
deploy-config-repository.comment-template.user-message.default.restored-from = Restored from revision #{revision}
###

# Deployment Repository properties

production-repository-configs = rules-production.properties

# Secret key for password code/decode
repository.encode.decode.key = This is the key for password secure

### Central Authentication Service (CAS) settings.
# WebStudio server url.
security.cas.app-url = https://localhost:8443/webstudio
# CAS server url.
security.cas.cas-server-url-prefix = https://localhost:9443/cas
# CAS 3.0 protocol validator prefix contains "/p3" in url (and is able to retrieve attributes). If CAS 2.0 is used, remove "/p3".
security.cas.cas-server-ticket-validator-prefix = ${security.cas.cas-server-url-prefix}/p3
# Default Group will be assigned to the users signing in first time. Can be empty.
security.cas.default-group = Viewers
# CAS attribute for First Name. Keep it empty if CAS server doesn't return this attribute.
security.cas.attribute.first-name =
# CAS attribute for Second Name. Keep it empty if CAS server doesn't return this attribute.
security.cas.attribute.last-name =
# CAS attribute for Groups. Keep it empty if CAS server doesn't return this attribute or groups are managed in WebStudio.
security.cas.attribute.groups =

### SAML settings.
# WebStudio server url.
security.saml.app-url = http://localhost:8080/webstudio
# SAML server metadata url.
security.saml.saml-server-metadata-url = http://localhost:9080/idp-meta.xml
# The time, in milliseconds, to wait for the metadata server to respond
security.saml.request-timeout = 15000
# File pointing to the JKS keystore
security.saml.keystore-file-path = classpath:security/keystore.jks
# Password to access the keystore
security.saml.keystore-password = changeit
# Service Provider alias for key in the keystore
security.saml.keystore-sp-alias = webstudio
# Password to access Service Provider key
security.saml.keystore-sp-password = ${security.saml.keystore-password}
# Default Group will be assigned to the users signing in first time. Can be empty.
security.saml.default-group = Viewers
# SAML attribute for Username. Keep it empty if SAML server doesn't return this attribute or if default algorithm for username retrieval must be used.
security.saml.attribute.username =
# SAML attribute for First Name. Keep it empty if SAML server doesn't return this attribute.
security.saml.attribute.first-name =
# SAML attribute for Second Name. Keep it empty if SAML server doesn't return this attribute.
security.saml.attribute.last-name =
# SAML attribute for Groups. Keep it empty if SAML server doesn't return this attribute or groups are managed in WebStudio.
security.saml.attribute.groups =
# Comma separated list of authentication contexts IDP is allowed to use when authenticating user. Can be empty.
security.saml.authentication-contexts = urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport
# Sets binding to be used for for sending SAML message to IDP. Can be empty. Possible values:
# urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST, urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect,
# urn:oasis:names:tc:SAML:2.0:bindings:PAOS, urn:oasis:names:tc:SAML:2.0:profiles:holder-of-key:SSO:browser, etc
security.saml.binding = urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect
# Set true for local logout (logging out only from WebStudio) and false for global logout (logging out from all services using this IdP)
security.saml.local-logout = false

### Active Directory (AD) settings.
security.ad.domain=localhost
security.ad.server-url=ldap://localhost:3268
security.ad.groups-are-managed-in-studio=true
security.ad.default-group=Viewers
